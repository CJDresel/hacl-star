(** This module provides direct access to all HACL* implementations *)

open SharedDefs

type bytes = CBytes.t

module RandomBuffer : sig
  val randombytes : bytes -> bool
end


(** {1 AEAD} *)
(** {2 Chacha20-Poly1305}
    Different implementations of Chacha20-Poly1305. A {{!EverCrypt.Chacha20_Poly1305}
    multiplexing interface} is also available.
*)

module Chacha20_Poly1305_32 : Chacha20_Poly1305
(** Portable C implementation of Chacha20-Poly1305 that runs on any 32-bit platform *)

module Chacha20_Poly1305_128 : Chacha20_Poly1305
(** 128-bit vectorized C implementation of Chacha20-Poly1305 that runs on any platform that supports {{!AutoConfig2.AVX} Intel AVX} *)

module Chacha20_Poly1305_256 : Chacha20_Poly1305
(** 256-bit vectorized C implementation of Chacha20-Poly1305 that runs on any platform that supports {{!AutoConfig2.AVX2} Intel AVX2} *)

(** {1 ECDH, EdDSA, and ECDSA} *)
(** {2 Curve25519}
    Different implementations of ECDH using Curve25519. A {{!EverCrypt.Curve25519}
    multiplexing interface} is also available.
*)

module Curve25519_51 : Curve25519
(** Portable C implementation that is optimized for use on 64-bit platforms that
    support 128-bit arithmetic, will still compile and execute on 32-bit platforms *)

module Curve25519_64 : Curve25519
(** Hybrid C/assembly implementation: the field arithmetic functions are in Intel assembly
    (generated by Vale) and rely on the {{!AutoConfig2.ADX} Intel ADX} and {{!AutoConfig2.BMI2} BMI2} instruction sets; the elliptic
    curve functions and the main API are in portable C *)

(** {2 Ed25519} *)

module Ed25519 : EdDSA
(** EdDSA using Curve25519 *)

(** {2 P-256} *)

module P256 : sig
  val compress_c : bytes -> bytes -> unit
  val compress_n : bytes -> bytes -> unit
  val decompress_c : bytes -> bytes -> bool
  val decompress_n : bytes -> bytes -> bool
  val dh_initiator : bytes -> bytes -> bool
  val dh_responder : bytes -> bytes -> bytes -> bool
  val valid_sk : bytes -> bool
  val valid_pk : bytes -> bool
  include ECDSA
  module SHA2_256 : ECDSA
  module SHA2_384 : ECDSA
  module SHA2_512 : ECDSA
end


(** {1 Hashing } *)
(** {2 SHA-2} *)

module SHA2_224 : HashFunction
module SHA2_256 : HashFunction
module SHA2_384 : HashFunction
module SHA2_512 : HashFunction

(** {2 SHA-3} *)

module SHA3_224 : HashFunction
module SHA3_256 : HashFunction
module SHA3_384 : HashFunction
module SHA3_512 : HashFunction
module Keccak : sig
  val keccak : int -> int -> int -> bytes -> bytes -> unit
  val shake128 : bytes -> bytes -> unit
  val shake256 : bytes -> bytes -> unit
end

(** {2 BLAKE2}
    The BLAKE2 hash function has 2 variants:
    - BLAKE2b, optimised for 64-bit architectures
    - BLAKE2s, optimised for 8- to 32-bit architectures
*)

module Blake2b_32 : Blake2
(** Portable BLAKE2b implementation *)

module Blake2b_256 : Blake2
(** Vectorized BLAKE2b implementation, requiring {{!AutoConfig2.AVX2} Intel AVX2} *)

module Blake2s_32 : Blake2
(** Portable BLAKE2s implementation *)

module Blake2s_128 : Blake2
(** Vectorized BLAKE2s implementation, requiring {{!AutoConfig2.AVX} Intel AVX} *)

(** {2 Legacy (deprecated)} *)

module MD5 : HashFunction [@@deprecated]
module SHA1 : HashFunction [@@deprecated]


(** {1 MACs} *)
(** {2 HMAC} *)

module HMAC_SHA2_256 : MAC
module HMAC_SHA2_384 : MAC
module HMAC_SHA2_512 : MAC

(** {2 Poly1305} *)

module Poly1305_32 : MAC
module Poly1305_128 : MAC
module Poly1305_256 : MAC

(** {1 NaCl } *)

module NaCl : sig
  val box_beforenm : bytes -> bytes -> bytes -> bool
  module Easy : sig
    val box : bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val box_open : bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val box_afternm : bytes -> bytes -> bytes -> bytes -> bool
    val box_open_afternm : bytes -> bytes -> bytes -> bytes -> bool
    val secretbox : bytes -> bytes -> bytes -> bytes -> bool
    val secretbox_open : bytes -> bytes -> bytes -> bytes -> bool
  end
  module Detached : sig
    val box : bytes -> bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val box_open : bytes -> bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val box_afternm : bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val box_open_afternm : bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val secretbox : bytes -> bytes -> bytes -> bytes -> bytes -> bool
    val secretbox_open : bytes -> bytes -> bytes -> bytes -> bytes -> bool
  end
end

(** {1 Key derivation} *)
(** {2 HKDF} *)

module HKDF_SHA2_256 : HKDF
module HKDF_SHA2_512 : HKDF
